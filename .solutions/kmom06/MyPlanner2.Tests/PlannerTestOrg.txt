namespace MyPlannerTests;
using MyPlanner2.Src;
using NUnit.Framework.Internal;

[TestFixture]
public class PlannerTest
{
    private Planner _myPlanner;
    private StringWriter _stringWriter;
    private StringReader _stringReader;

    [SetUp]
    public void Setup()
    {
        _myPlanner = new Planner(false);
        _stringWriter = new StringWriter();
        Console.SetOut(_stringWriter);
        _stringReader = new StringReader("");
    }

    [TearDown]
    public void TearDown()
    {
        _stringWriter.Dispose();
        _stringReader?.Dispose();
    }

    [Test]
    public void TestCreatePlanner()
    {
        Assert.That(_myPlanner, Is.InstanceOf<Planner>());
        Assert.That(_myPlanner.GetNoOfTasks(), Is.EqualTo(0), "Number of tasks should be 0.");
       
    }

    [Test]
    public void TestShowMenu()
    {
        string input = "e" + Environment.NewLine; // Avsluta menyn
        _stringReader = new StringReader(input);
        Console.SetIn(_stringReader);
        _myPlanner.Run();
        var output = _stringWriter.ToString();
        Assert.That(output, Does.Contain("1. Skapa en uppgift"), "The string should contain: 1. Skapa en uppgift");
        Assert.That(output, Does.Contain("2. Uppdatera en uppgift"), "The string should contain: 2. Uppdatera en uppgift");
        Assert.That(output, Does.Contain("3. Ta bort en uppgift"), "The string should contain: 3. Ta bort en uppgift");
        Assert.That(output, Does.Contain("4. Skriv ut alla uppgifter"), "The string should contain: 4. Skriv ut alla uppgifter");
        Assert.That(output, Does.Contain("5. Skriv ut alla avklarade uppgifter"), "The string should contain: 5. Skriv ut alla avklarade uppgifter");
        Assert.That(output, Does.Contain("e. Avsluta"), "The string should contain: " + "e. Avsluta");
    }

    [Test]
    public void TestMenuEnd()
    {
        string input = "e" + Environment.NewLine; // Avsluta menyn
        _stringReader = new StringReader(input);
        Console.SetIn(_stringReader);
        string result = "\nDu har valt att avsluta! Hej då!";
        _myPlanner.Run();
        var output = _stringWriter.ToString();
        Assert.That(output, Does.Contain(result), "The string should be: " + result);
    }

    [Test]
    public void TestInvalidMenuOption()
    {
        string input = "invalid" + Environment.NewLine; // Felaktigt menyval
        input += "e" + Environment.NewLine; // Avsluta menyn
        _stringReader = new StringReader(input);
        Console.SetIn(_stringReader);
        string result = "\nOgiltigt menyval";
        _myPlanner.Run();
        var output = _stringWriter.ToString();
        Assert.That(output, Does.Contain(result), "The string should be: " + result);
    }

    [Test]
    public void TestMenuOptionCreate()
    {
        string input = "1" + Environment.NewLine; // Välj skapa uppgift
        input += "Test" + Environment.NewLine; // Ange titel
        input += "Test description" + Environment.NewLine; // Ange beskrivning
        input += "2024-06-24" + Environment.NewLine; // Ange datum när uppgiften ska vara klar
        input += "e" + Environment.NewLine; // Avsluta menyn
        _stringReader = new StringReader(input);
        Console.SetIn(_stringReader);
        string result = "\nUppgiften Test är skapad!";
        _myPlanner.Run();
        var output = _stringWriter.ToString();
        Assert.Multiple(() =>
        {
            Assert.That(output, Does.Contain(result), "The string should be: " + result);
            Assert.That(_myPlanner.TaskCount, Is.EqualTo(1), "Number of tasks should be 1.");
        });
    }

    [Test]
    public void TestMenuOptionUpdate()
    {
        string input = "1" + Environment.NewLine; // Välj skapa uppgift
        input += "Test" + Environment.NewLine; // Ange titel
        input += "Test description" + Environment.NewLine; // Ange beskrivning
        input += "2024-06-24" + Environment.NewLine; // Ange datum när uppgiften ska vara klar
        input += "2" + Environment.NewLine; // Välj uppdatera uppgift
        input += "Test" + Environment.NewLine; // Ange titel för uppgiften som ska uppdateras
        input += "Nej" + Environment.NewLine; // Ange att uppgiften inte är klar
        input += "Updated test description" + Environment.NewLine; // Ange ny beskrivning
        input += "" + Environment.NewLine; // Ange datum "" anger samma datum som innan
        input += "e" + Environment.NewLine; // Avsluta menyn
        _stringReader = new StringReader(input);
        Console.SetIn(_stringReader);
        string result = "\nUppgiften Test är uppdaterad!";
        _myPlanner.Run();
        var output = _stringWriter.ToString();
        Assert.Multiple(() =>
        {
            Assert.That(output, Does.Contain(result), "The string should be: " + result);
            Assert.That(_myPlanner.TaskCount, Is.EqualTo(1), "Number of tasks should be 1.");
        });
    }

    [Test]
    public void TestMenuOptionUpdateCompleted()
    {
        string input = "1" + Environment.NewLine; // Välj skapa uppgift
        input += "Test" + Environment.NewLine; // Ange titel
        input += "Test description" + Environment.NewLine; // Ange beskrivning
        input += "2024-06-24" + Environment.NewLine; // Ange datum när uppgiften ska vara klar
        input += "2" + Environment.NewLine; // Välj uppdatera uppgift
        input += "Test" + Environment.NewLine; // Ange titel för uppgiften som ska uppdateras
        input += Environment.NewLine; // Ange enter då uppgiften är klar
        input += "e" + Environment.NewLine; // Avsluta menyn
        _stringReader = new StringReader(input);
        Console.SetIn(_stringReader);
        string result = "\nUppgiften Test är uppdaterad!";
        _myPlanner.Run();
        var output = _stringWriter.ToString();
        Assert.Multiple(() =>
        {
            Assert.That(output, Does.Contain(result), "The string should be: " + result);
            Assert.That(_myPlanner.TaskCount, Is.EqualTo(1), "Number of tasks should be 1.");
        });
    }

    [Test]
    public void TestMenuOptionDelete()
    {
        string input = "1" + Environment.NewLine; // Välj skapa uppgift
        input += "Test" + Environment.NewLine; // Ange titel
        input += "Test description" + Environment.NewLine; // Ange beskrivning
        input += "2024-06-24" + Environment.NewLine; // Ange datum när uppgiften ska vara klar
        input += "3" + Environment.NewLine; // Välj uppdatera uppgift
        input += "Test" + Environment.NewLine; // Ange titel för uppgiften som ska uppdateras
        input += Environment.NewLine; // Ange enter då uppgiften är klar
        input += "e" + Environment.NewLine; // Avsluta menyn
        _stringReader = new StringReader(input);
        Console.SetIn(_stringReader);
        string result = "\nUppgiften Test är nu borttagen!";
        _myPlanner.Run();
        var output = _stringWriter.ToString();
        Assert.Multiple(() =>
        {
            Assert.That(output, Does.Contain(result), "The string should be: " + result);
            Assert.That(_myPlanner.TaskCount, Is.EqualTo(0), "Number of tasks should be 0.");
        });
    }

    [Test]
    public void TestMenuOptionPrintAllEmpty()
    {
        string input = "4" + Environment.NewLine; // Välj skriv ut alla uppgifter
        input += "e" + Environment.NewLine; // Avsluta menyn
        _stringReader = new StringReader(input);
        Console.SetIn(_stringReader);
        string result = "\nDet finns inga uppgifter!";
        _myPlanner.Run();
        var output = _stringWriter.ToString();
        Assert.Multiple(() =>
        {
            Assert.That(output, Does.Contain(result), "The string should be: " + result);
            Assert.That(_myPlanner.TaskCount, Is.EqualTo(0), "Number of tasks should be 0.");
        });
    }

    [Test]
    public void TestMenuOptionPrintAll()
    {
        string input = "1" + Environment.NewLine; // Välj skapa uppgift
        input += "Test" + Environment.NewLine; // Ange titel
        input += "Test description" + Environment.NewLine; // Ange beskrivning
        input += "2024-06-24" + Environment.NewLine; // Ange datum när uppgiften ska vara klar
        input += "4" + Environment.NewLine; // Välj uppdatera uppgift
        input += "e" + Environment.NewLine; // Avsluta menyn
        _stringReader = new StringReader(input);
        Console.SetIn(_stringReader);
        string result = "\nAlla uppgifter:";
        _myPlanner.Run();
        var output = _stringWriter.ToString();
        Assert.Multiple(() =>
        {
            Assert.That(output, Does.Contain(result), "The string should be: " + result);
            Assert.That(_myPlanner.TaskCount, Is.EqualTo(1), "Number of tasks should be 0.");
        });
    }

    [Test]
    public void TestMenuOptionPrintAllCompletedEmpty()
    {
        string input = "1" + Environment.NewLine; // Välj skapa uppgift
        input += "Test" + Environment.NewLine; // Ange titel
        input += "Test description" + Environment.NewLine; // Ange beskrivning
        input += "2024-06-24" + Environment.NewLine; // Ange datum när uppgiften ska vara klar
        input += "5" + Environment.NewLine; // Välj skriv ut alla avklarade uppgifter
        input += "e" + Environment.NewLine; // Avsluta menyn
        _stringReader = new StringReader(input);
        Console.SetIn(_stringReader);
        string result = "\nDet finns inga avklarade uppgifter!";
        _myPlanner.Run();
        var output = _stringWriter.ToString();
        Assert.Multiple(() =>
        {
            Assert.That(output, Does.Contain(result), "The string should be: " + result);
            Assert.That(_myPlanner.TaskCount, Is.EqualTo(1), "Number of tasks should be 1.");
        });
    }

    [Test]
    public void TestMenuOptionPrintAllCompleted()
    {
        string input = "1" + Environment.NewLine; // Välj skapa uppgift
        input += "Test" + Environment.NewLine; // Ange titel
        input += "Test description" + Environment.NewLine; // Ange beskrivning
        input += "2024-06-24" + Environment.NewLine; // Ange datum när uppgiften ska vara klar
        input += "2" + Environment.NewLine; // Välj uppdatera uppgift
        input += "Test" + Environment.NewLine; // Ange titel för uppgiften som ska uppdateras
        input += Environment.NewLine; // Ange enter då uppgiften är klar
        input += "5" + Environment.NewLine; // Välj uppdatera uppgift
        input += "e" + Environment.NewLine; // Avsluta menyn
        _stringReader = new StringReader(input);
        Console.SetIn(_stringReader);
        string result = "\nAlla avklarade uppgifter:";
        _myPlanner.Run();
        var output = _stringWriter.ToString();
        Assert.Multiple(() =>
        {
            Assert.That(output, Does.Contain(result), "The string should be: " + result);
            Assert.That(_myPlanner.TaskCount, Is.EqualTo(1), "Number of tasks should be 0.");
        });
    }
}